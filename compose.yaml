# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    command: bash -c 'yarn main & sleep 20 && yarn media'
    environment:
      NODE_ENV: development
    ports:
      - 3100:3100
    volumes:
      - .:/usr/src/app
    working_dir: /usr/src/app
  coturn:
    image: instrumentisto/coturn
    ports:
      - 3478:3478
      - 3478:3478/udp
      - 443:443
      - 443:443/udp
      - "40000-40110:40000-40110"
      - "40000-40110:40000-40110/udp"
    volumes:
      - ./turnserver.conf:/etc/coturn/turnserver.conf
      - ./certs/privkey.pem:/etc/coturn/privkey.pem
      - ./certs/fullchain.pem:/etc/coturn/fullchain.pem

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

